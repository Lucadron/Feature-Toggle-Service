// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Case'de istenen Tenant (Kiracı) modeli
model Tenant {
  id        String   @id @default(cuid())
  name      String   @unique
  apiKey    String   @unique // Tenant'ın kimliğini belirlemek için
  apiSecret String   // JWT almak için kullanılacak hash'lenmiş secret
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  featureFlags FeatureFlag[]
  auditLogs    AuditLog[]
}

// Case'de istenen Feature (Özellik) modeli
model Feature {
  id          String   @id @default(cuid())
  name        String   @unique // Örn: "new-dashboard", "beta-checkout"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  featureFlags FeatureFlag[]
}

// Değerlendirme stratejisi tipleri
enum EvaluationStrategy {
  BOOLEAN    // Basit true/false
  PERCENTAGE // Yüzdelik dağılım
  USER       // Belirli kullanıcı listesi (Bu case'de basitleştireceğiz)
}

// Ortam tipleri
enum Environment {
  dev
  staging
  prod
}

// Case'de istenen ana model: Feature Flags
model FeatureFlag {
  id        String   @id @default(cuid())
  tenantId  String
  featureId String
  env       Environment // dev, staging, prod
  enabled   Boolean     @default(false) // Ana açma/kapama
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Gelişmiş Değerlendirme (Case'in 1. maddesi)
  strategy      EvaluationStrategy @default(BOOLEAN)
  strategyValue Json?              // PERCENTAGE için { "percentage": 50 }, USER için { "userIds": ["id1", "id2"] }

  // İlişkiler
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  // Performans için kompozit indeks (Case'de önerilen)
  @@index([tenantId, env])
  // Bir tenant, bir özellik ve bir ortam için sadece bir kayıt olmalı
  @@unique([tenantId, featureId, env])
}

// Case'de istenen Audit Logging (2. madde)
model AuditLog {
  id        String   @id @default(cuid())
  tenantId  String
  actor     String // Değişikliği kimin/neyin yaptığı (Örn: Tenant Adı veya API Key)
  action    String // CREATE, UPDATE, DELETE
  entity    String // Hangi varlık (FeatureFlag)
  entityId  String
  diff      Json?    // Önceki ve sonraki durum
  createdAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId, createdAt])
}